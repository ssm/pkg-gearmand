# vim:ft=automake
# Gearman server and library
# Copyright (C) 2008 Brian Aker, Eric Day
# All rights reserved.
#
# Use and distribution licensed under the BSD license.  See
# the COPYING file in the parent directory for full text.

noinst_LTLIBRARIES+= tests/libtest.la
tests_libtest_la_SOURCES= tests/test.c tests/test_gearmand.c

VALGRIND_COMMAND= $(LIBTOOL) --mode=execute valgrind --leak-check=yes --show-reachable=yes

TEST_LDADD= \
	    tests/libtest.la \
	    libgearman/libgearman.la \
	    libgearman-server/libgearman-server.la


if HAVE_LIBMEMCACHED
if HAVE_MEMCACHED
LIBMEMCACHED_PIDFILE = ${abs_top_builddir}/tests/Xumemc.pid
LIBMEMCACHED_TEST= tests/memcached_test
# Note, SETUP should do a test for existance and then kill if it exists.
LIBMEMCACHED_SETUP= @$(MEMCACHED_BINARY) -d -P ${LIBMEMCACHED_PIDFILE} -p 12555
LIBMEMCACHED_TEARDOWN= @\
		       cat ${LIBMEMCACHED_PIDFILE} | xargs kill; \
		       rm ${LIBMEMCACHED_PIDFILE}

noinst_PROGRAMS += tests/memcached_test
endif
endif

tests_memcached_test_SOURCES= tests/memcached_test.c
tests_memcached_test_LDADD= ${TEST_LDADD}

if HAVE_LIBSQLITE3
SQLITE_TEST= tests/sqlite_test
SQLITE_RM= @rm -f tests/gearman.sql tests/gearman.sql-journal
CLEANFILES+= tests/gearman.sql tests/gearman.sql-journal
noinst_PROGRAMS += tests/sqlite_test
endif

tests_sqlite_test_SOURCES= tests/sqlite_test.c
tests_sqlite_test_LDADD= ${TEST_LDADD}

if HAVE_LIBTOKYOCABINET
TOKYOCABINET_TEST= tests/tokyocabinet_test
TOKYOCABINET_RM= @rm -f tests/gearman.tcb
CLEANFILES+= tests/gearman.tcb
noinst_PROGRAMS += tests/tokyocabinet_test
endif

tests_tokyocabinet_test_SOURCES= tests/tokyocabinet_test.c
tests_tokyocabinet_test_LDADD= ${TEST_LDADD}

noinst_PROGRAMS+= \
		  tests/client_test \
		  tests/cpp_test \
		  tests/internals_test \
		  tests/regression_test \
		  tests/round_robin_test \
		  tests/worker_test

noinst_HEADERS+= \
		 tests/test.h \
		 tests/test_gearmand.h \
		 tests/test_worker.h

tests_client_test_SOURCES= tests/test_worker.c tests/client_test.c
tests_client_test_LDADD= ${TEST_LDADD}

tests_internals_test_SOURCES= tests/internals.c
tests_internals_test_LDADD= ${TEST_LDADD} libgearman/libgearmancore.la

tests_regression_test_SOURCES= tests/regression.c
tests_regression_test_LDADD= ${TEST_LDADD} libgearman/libgearmancore.la

tests_round_robin_test_SOURCES= tests/round_robin.c
tests_round_robin_test_LDADD= ${TEST_LDADD} libgearman/libgearmancore.la

tests_worker_test_SOURCES= tests/worker_test.c
tests_worker_test_LDADD= ${TEST_LDADD}

# Test linking with C++ application
tests_cpp_test_SOURCES= tests/cpp_test.cc
tests_cpp_test_LDADD= ${TEST_LDADD}

test-client:
	@tests/client_test $(ARG1) $(ARG2)

test-round-robin:
	tests/round_robin_test $(ARG1) $(ARG2)

test-worker:
	@tests/worker_test $(ARG1) $(ARG2)

test-internals:
	@tests/internals_test $(ARG1) $(ARG2)

test-libmemcached:
if HAVE_LIBMEMCACHED
if HAVE_MEMCACHED
	$(LIBMEMCACHED_SETUP)
	$(LIBMEMCACHED_TEST) $(ARG1) $(ARG2)
	$(LIBMEMCACHED_TEARDOWN)
endif
endif

test-sqlite:
if HAVE_LIBSQLITE3
	$(SQLITE_TEST) $(ARG1) $(ARG2)
	$(SQLITE_RM)
endif

gdb-sqlite:
if HAVE_LIBSQLITE3
	$(LIBTOOL) --mode=execute gdb tests/sqlite_test
	$(SQLITE_RM)
endif

test-tokyocabinet:
if HAVE_LIBTOKYOCABINET
	$(TOKYOCABINET_TEST) $(ARG1) $(ARG2)
	$(TOKYOCABINET_RM)
endif

check-local: test-client test-round-robin test-worker test-internals test-libmemcached test-sqlite test-tokyocabinet

gdb-client: ${noinst_PROGRAMS}
	$(LIBTOOL) --mode=execute gdb tests/client_test

gdb-round-robin: ${noinst_PROGRAMS}
	$(LIBTOOL) --mode=execute gdb tests/round_robin_test

gdb-worker: ${noinst_PROGRAMS}
	$(LIBTOOL) --mode=execute gdb tests/worker_test

gdb-internals: ${noinst_PROGRAMS}
	$(LIBTOOL) --mode=execute gdb tests/internals_test

valgrind-client:
	$(VALGRIND_COMMAND) tests/client_test $(ARG1) $(ARG2)

valgrind-round-robin:
	$(VALGRIND_COMMAND) tests/round_robin_test $(ARG1) $(ARG2)

valgrind-worker:
	$(VALGRIND_COMMAND) tests/worker_test $(ARG1) $(ARG2)

valgrind-internals:
	$(VALGRIND_COMMAND) tests/internals_test $(ARG1) $(ARG2)

valgrind-libmemcached:
	$(LIBMEMCACHED_SETUP)
	$(VALGRIND_COMMAND) $(LIBMEMCACHED_TEST) $(ARG1) $(ARG2)
	$(LIBMEMCACHED_TEARDOWN)

valgrind-sqlite:
if HAVE_LIBSQLITE3
	$(VALGRIND_COMMAND) $(SQLITE_TEST) $(ARG1) $(ARG2)
	$(SQLITE_RM)
endif

valgrind-tokyocabinet:
if HAVE_LIBTOKYOCABINET
	$(VALGRIND_COMMAND) $(TOKYOCABINET_TEST) $(ARG1) $(ARG2)
	$(TOKYOCABINET_RM)
endif

GEARMAN_CLIENT_TEST= bin/gearman
GEARMAN_PIDFILE = ${abs_top_builddir}/tests/Xugear.pid

client-test: $(GEARMAN_CLIENT_TEST)
	@$(GEARMAN_CLIENT_TEST) -H 2>&1 > /dev/null
	@$(GEARMAN_CLIENT_TEST) -w -f true -d -i $(GEARMAN_PIDFILE) -- false
	cat $(GEARMAN_PIDFILE) | xargs kill
	@echo "gearman client success"

#valgrind: ${noinst_PROGRAMS} valgrind-client valgrind-worker valgrind-internals valgrind-sqlite valgrind-tokyocabinet

valgrind: ${noinst_PROGRAMS} valgrind-client valgrind-round-robin valgrind-worker valgrind-internals valgrind-sqlite valgrind-tokyocabinet

bogus:

